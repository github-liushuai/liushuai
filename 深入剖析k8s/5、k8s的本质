k8s项目架构由Master 和 Node两种节点构成
Master
  kube-apiserver：负责API服务
  kube-scheduler：负责调度
  kube-controller-manager：负责容器编排  
  Etcd：整个集群的持久化数据，由 kube-apiserver 处理后保存在 Etcd中
  
Node
  Networking：kubelet调用CNI（Container NetworkingInterface）接口为容器配置网络
  kubelet：计算节点最核心的组件，主要负责同容器运行时（比如 Docker 项目）打交道
  Container Runtime：kubelet调用CRI（Container Runtime Interface）同容器运行时（比如 Docker 项目）打交道，这个接口定义了容器运行时的各项核心操作，比如：启动一个容器需要的所有参数
  Volume Plugin：kubelet调用CSI（Container Storage Interface）接口为容器配置持久化存储
  Device Plugin：kubelet 还通过 gRPC 协议同一个叫作 Device Plugin 的插件进行交互，用来管理 GPU 等宿主机物理设备的主要组件，也是基于Kubernetes 项目进行机器学习训练、高性能作业支持等工作必须关注的功能
  Linux OS：具体的容器运行时（Container Runtime），比如 Docker 项目，则一般通过 OCI 这个容器运行时规范同底层的Linux 操作系统进行交互，即：把 CRI 请求翻译成对 Linux 操作系统的调用（操作 LinuxNamespace 和 Cgroups 等）
  
k8s比较于其他容器编排工具的优势在哪？
1、Kubernetes 项目最主要的设计思想是，从更宏观的角度，以统一的方式来定义任务之间的各种关系，并且为将来支持更多种类的关系留有余地
  Pod：Pod 里的容器共享同一个 Network Namespace、同一组数据卷，从而达到高效率交换信息的目的
  Service：作为 Pod 的代理入口（Portal），从而代替 Pod 对外暴露一个“终生不变”的网络地址，Service 后端真正代理的 Pod 的 IP 地址、端口等信息的自动更新、维护，则是Kubernetes 项目的职责
  Secret：最典型的例子就是 Web 应用对数据库访问时需要 Credential（数据库的用户名和密码）信息，把 Credential 信息以 Secret 的方式存在 Etcd 里，Kubernetes 就会在你指定的 Pod（比如，Web 应用的 Pod）启动时，自动把 Secret 里的数据以 Volume 的方式挂载到容器里，这样 Web 应用就可以访问数据库了
2、应用运行的形态是影响“如何容器化这个应用”的第二个重要因素
  Kubernetes 定义了新的、基于 Pod 改进后的对象，比如：
    Job，用来描述一次性运行的 Pod（比如，大数据任务）；
    DaemonSet，用来描述每个宿主机上必须且只能运行一个副本的守护进程服务；
    CronJob，则用于描述定时任务
    
可以看到，Kubernetes 项目并没有像其他项目那样，为每一个管理功能创建一个指令，然后在项目中实现其中的逻辑
相比之下，在 Kubernetes 项目中，我们所推崇的使用方法是：
  首先，通过一个“编排对象”，比如 Pod、Job、CronJob 等，来描述你试图管理的应用；
  然后，再为它定义一些“服务对象”，比如 Service、Secret、Horizontal PodAutoscaler（自动水平扩展器）等。这些对象，会负责具体的平台级功能
这种使用方法，就是所谓的“声明式 API”。这种 API 对应的“编排对象”和“服务对象”，都是 Kubernetes 项目中的 API 对象



  
