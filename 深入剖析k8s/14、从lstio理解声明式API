声明式API的特点：
  1、我只需要提交一个定义好的 API 对象来“声明”，我所期望的状态是什么样子
  2、许有多个 API 写端，以 PATCH 的方式对 API 对象进行修改，而无需关心本地原始 YAML 文件的内容，一次能处理多个写操作，并且具备 Merge 能力
  有了上述两个能力，Kubernetes 项目才可以基于对 API 对象的增、删、改、查，在完全无需外界干预的情况下，完成对“实际状态”和“期望状态”的调谐（Reconcile）过程

接下来以lstio（一个基于 Kubernetes 项目的微服务治理框架）为例来说明声明式 API 在实际使用时的重要意义
Istio 最根本的组件，是运行在每一个应用 Pod 里的 Envoy 容器，以 sidecar 容器的方式运行在了每一个被治理的应用Pod 中，且共享同一个 Network Namespace，所以Envoy 容器就能够通过配置 Pod 里的 iptables 规则，把整个 Pod 的进出流量接管下来；
Istio 的控制层（Control Plane）里的 Pilot 组件，就能够通过调用每个 Envoy容器的 API，对这个 Envoy 代理进行配置，从而实现微服务治理；
更重要的是，在整个微服务治理的过程中，无论是对 Envoy 容器的部署，还是像上面这样对 Envoy 代理的配置，用户和应用都是完全“无感”的！
举个例子，假如有两个Pod分别是新版本和旧版本的应用，Pilot 可以通过调节这两 Pod 里的 Envoy 容器的配置，从而将 90%的流量分配给旧版本的应用，将 10% 的流量分配给新版本应用，并且还可以在后续的过程中随时调整，直至所有流量全部分配给新版本，这就完成了这个灰度发布的过程

明明需要往Pod里面注入Envoy容器，lstio又是怎么做到用户和应用对此都是完全“无感”的呢？
答：Istio 项目使用的，是 Kubernetes 中的一个非常重要的功能，叫作 DynamicAdmission Control
   我们先来介绍一下Admission Control：任何一个 API 对象被提交给 APIServer 之后，总有一些“初始化”性质的工作需要在它们被 Kubernetes 项目正式处理之前进行，
   比如，自动为所有 Pod 加上某些标签（Labels），而这个“初始化”操作的实现就是借助Admission Control，它可以选择性地被编译进APIServer 中，在 API 对象创建之后会被立刻调用到；
   我们无法使用 Admission Controller来添加自己的规则，因为这意味着要重新编译和重启APIServer；
   所以，Kubernetes 项目为我们额外提供了一种“热插拔”式的 Admission 机制，它就是Dynamic Admission Control，也叫作：Initializer

首先我们要了解，Istio 项目要做的，就是在这个 Pod YAML 被提交给 Kubernetes 之后，在它对应的 API 对象里自动加上 Envoy 容器的配置;
可以看到，被 Istio 处理后的这个 Pod 里，除了用户自己定义的 myapp-container 容器之外，多出了一个叫作 envoy 的容器，它就是 Istio 要使用的 Envoy 代理
"""
...
  containers:  
  - name: myapp-container    
    image: busybox    
    command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']  
  - name: envoy    
    image: lyft/envoy:845747b88f102c0fd262ab234308e9e22f693a1    
    command: ["/usr/local/bin/envoy"]
...
"""

如何在用户完全不知情的前提下完成这个操作的呢？
  要添加envoy容器，首先我们要定义这个envoy容器吧？在哪定义呢，答案是configmap（我们取名叫：envoy-initializer），这个 ConfigMap 的 data 部分，正是一个 Pod 对象的一部分定义
  不难想到，Initializer 要做的工作，就是把这部分 Envoy 相关的字段，自动添加到用户提交的 Pod 的 API 对象里，但是用户提交的声明本身就有这些字段，这就意味着k8s需要有类似merge的功能，将定义好的envoy和用户的声明merge起来
  """
  ...
  apiVersion: v1
  kind: ConfigMap
  metadata:  
    name: envoy-initializer
  data:
    config: |    
      containers:      
        - name: envoy        
          image: lyft/envoy:845747db88f102c0fd262ab234308e9e22f693a1        
          command: ["/usr/local/bin/envoy"]
  ...
      volumes:      
        - name: envoy-conf        
          configMap:          
          name: envoy
  """

所以说，在 Initializer 更新用户的 Pod 对象的时候，必须使用 PATCH API 来完成，而这种 PATCH API，正是声明式 API 最主要的能力！

接下来，Istio 将一个编写好的 Initializer（也取名为envoy-initializer），作为一个 Pod 部署在 Kubernetes 中；
这个 envoy-initializer 使用的 envoy-initializer:0.0.1 镜像，就是一个事先编写好的“自定义控制器”（Custom Controller），如何编写后面再讲解，这里描述下这个控制器的功能：
  k8s控制器，实际上就是一个“死循环”，不断地获取“实际状态”，然后与“期望状态”作对比，并以此为依据决定下一步的操作；
  而 Initializer 的控制器，不断获取到的“实际状态”，就是用户新创建的 Pod。而它的“期望状态”，则是 这个 Pod 里被添加了 Envoy 容器的定义
  如果这个 Pod 里面已经添加过 Envoy 容器，那么就“放过”这个 Pod，进入下一个检查周期。而如果还没有添加过 Envoy 容器的话，它就要进行 Initialize 操作了，即：修改该 Pod的 API 对象  

Kubernetes 还允许你通过配置，来指定要对什么样的资源进行这个 Initialize 操作，比如下面这个例子就意味着 Kubernetes 要对所有的 Pod 进行这个 Initialize 操作，并且，我们指定了负责这个操作的 Initializer，名叫：envoy-initializer
"""
apiVersion: admissionregistration.k8s.io/v1alpha1
kind: InitializerConfiguration
metadata:  
  name: envoy-config
initializers:  
  // 这个名字必须至少包括两个 "."  
  - name: envoy.initializer.kubernetes.io    
    rules:      
      - apiGroups:          
          - "" // 前面说过， "" 就是 core API Group 的意思        
        apiVersions:          
          - v1        
        resources:          
          - pods
"""
一旦这个 InitializerConfiguration 被创建，Kubernetes 就会把这个 Initializer 的名字，加在所有新创建的 Pod 的 Metadata 上，格式如下所示：
"""
apiVersion: v1
kind: Pod
metadata:  
  initializers:    
    pending:      
      - name: envoy.initializer.kubernetes.io  
  name: myapp-pod  
  labels:    
    app: myapp
...
"""
可以看到，每一个新创建的 Pod，都会自动携带了 metadata.initializers.pending 的Metadata 信息，这正是 Initializer 的控制器判断这个 Pod 有没有执行过自己所负责的初始化操作的重要依据；
这也就意味着，当你在 Initializer 里完成了要做的操作后，一定要记得将这个metadata.initializers.pending 标志清除掉

此外，除了上面的配置方法，你还可以在具体的 Pod 的 Annotation 里添加一个如下所示的字段，从而声明要使用某个 Initializer
在这个 Pod 里，我们添加了一个 Annotation，写明：initializer.kubernetes.io/envoy=true
这样，就会使用到我们前面所定义的envoy-initializer 了
"""
apiVersion: v1
kind: Pod
metadata:  
  annotations:    
    "initializer.kubernetes.io/envoy": "true"    
...
"""

而在使用 Initializer 的流程中，最核心的步骤，莫过于 Initializer“自定义控制器”的编写过程。它遵循的，正是标准的“Kubernetes 编程范式”，即:
  如何使用控制器模式，同 Kubernetes 里 API 对象的“增、删、改、查”进行协作，进而完成用户业务逻辑的编写过程
  
我们来总结下这里提到的各项功能
InitializerConfiguration：声明指定Initialize起作用的范围，还可以通过annotations来指定某个pod是否需要使用Initialize
Initialize：具体执行 将envoy信息写进用户pod 操作的实体，本身其实就是个pod，它会拿到pod的实际状态 跟 期望状态进行对比，然后进行相应操作
ConfigMap（envoy-initializer）：envoy信息的定义，Initialize就是从这里拿到要添加什么信息进用户pod





