以deployment控制器为例，假设我创建了一个携带了 pod标签为app=nginx 且 spec.replicas 为2 的deployment控制器，
这就意味着，如果在这个集群中，携带 app=nginx 标签的 Pod 的个数大于 2 的时候，就会有旧的 Pod 被删除；反之，就会有新的 Pod 被创建

你也许就会好奇：究竟是 Kubernetes 项目中的哪个组件，在执行这些操作呢？
答：kube-controller-manager这个组件，就是一系列控制器的集合
我们可以查看一下 Kubernetes 项目的pkg/controller 目录，这个目录下面的每一个控制器，都以独有的方式负责某种编排功能。而我们的Deployment，正是这些控制器中的一种

实际上，这些控制器之所以被统一放在 pkg/controller 目录下，就是因为它们都遵循Kubernetes 项目中的一个通用编排模式，即：控制循环（control loop）
比如，现在有一种待编排的对象 X，它有一个对应的控制器。那么，我就可以用一段 Go 语言风格的伪代码，为你描述这个控制循环：
"""
for {
  实际状态 := 获取集群中对象 X 的实际状态（Actual State）
  期望状态 := 获取集群中对象 X 的期望状态（Desired State）  
  if 实际状态 == 期望状态{
    什么都不做  
  } else {
    执行编排动作，将实际状态调整为期望状态  
  }
}
"""
在具体实现中，实际状态往往来自于 Kubernetes 集群本身，而期望状态，一般来自于用户提交的 YAML 文件（这些信息往往都保存在 Etcd中）

类似 Deployment 这样的一个控制器，实际上都是由上半部分的控制器定义（包括期望状态），加上下半部分的被控制对象的模板组成的
