DaemonSet 的主要作用，是让你在 Kubernetes 集群里，运行一个 DaemonPod，所以，这个 Pod 有如下三个特征：
  1. 这个 Pod 运行在 Kubernetes 集群里的每一个节点（Node）上；
  2. 每个节点上只有一个这样的 Pod 实例；
  3. 当有新的节点加入 Kubernetes 集群后，该 Pod 会自动地在新节点上被创建出来；而当旧节点被删除后，它上面的 Pod 也相应地会被回收掉

DaemonSet 又是如何保证每个 Node 上有且只有一个被管理的 Pod 呢？
答：DaemonSet Controller，首先从 Etcd 里获取所有的 Node 列表，然后遍历所有的Node；
这时，它就可以很容易地去检查，当前这个 Node 上是不是有一个携带指定Pod，如果正好只有一个Pod说明这个节点正常，如果Pod数量大于1则删除到只剩一个，如果没有则创建一个Pod

如何在指定的 Node 上创建新 Pod 呢？
答：用 nodeSelector，不过这个字段快被废弃了，我们可以用nodeAffinity来代替它的作用；
   nodeAffinity 的定义，可以支持更加丰富的语法，比如 operator:In（即：部分匹配；如果你定义 operator: Equal，就是完全匹配），这也正是nodeAffinity 会取代 nodeSelector 的原因之一；
   我们的 DaemonSet Controller 会在创建 Pod 的时候，自动在这个 Pod 的 API对象里，加上这样一个 nodeAffinity 定义，其中需要绑定的节点名字，正是当前正在遍历的这个 Node

DaemonSet还会自动加上 tolerations 字段
"""
spec:  
  tolerations:  
  - key: node.kubernetes.io/unschedulable    
    operator: Exists    
    effect: NoSchedule
"""
这个 Toleration 的含义是：“容忍”所有被标记为 unschedulable“污点”的Node；“容忍”的效果是允许调度
这就使得这些 Pod 可以忽略这个限制，继而保证每个节点上都会被调度一个 Pod

如果我们要安装一个网络插件DaemonSet，在完成安装前整个集群网络是NotReady的，普通Pod是无法调度上去的（当一个节点的网络插件尚未安装时，这个节点就会被自动加上名为node.kubernetes.io/network-unavailable的“污点”）
这就需要在这个DaemonSet 的 YAML 文件里，给它的 Pod 模板加上一个能够“容忍”node.kubernetes.io/network-unavailable“污点”的 Toleration
通过这样一个 Toleration，调度器在调度这个 Pod 的时候，就会忽略当前节点上的“污点”，从而成功地将网络插件的 Agent 组件调度到这台机器上启动起来

DaemonSet 可以像 Deployment 那样，进行版本管理，这些版本又是如何维护的呢？
答：Kubernetes v1.7 之后添加了一个 API 对象，名叫ControllerRevision，专门用来记录某种 Controller 对象的版本
