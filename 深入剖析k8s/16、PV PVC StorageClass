PV 描述的，是持久化存储数据卷，这个 API 对象主要定义的是一个持久化存储在宿主机上的目录，通常情况下，PV 对象是由运维人员事先创建在 Kubernetes 集群里待用的
PVC 描述的，则是 Pod 所希望使用的持久化存储的属性，比如Volume 存储的大小、可读写权限等等

而用户创建的 PVC 要真正被容器使用起来，就必须先和某个符合条件的 PV 进行绑定。这里要检查的条件，包括两部分：
  第一个条件，当然是 PV 和 PVC 的 spec 字段。比如，PV 的存储（storage）大小，就必须满足 PVC 的要求
  第二个条件，则是 PV 和 PVC 的 storageClassName 字段必须一样

在成功地将 PVC 和 PV 进行绑定之后，Pod 就能够像使用 hostPath 等常规类型的Volume 一样，在自己的 YAML 文件里声明使用这个 PVC 了
"""
...
  volumes:  
  - name: nfs    
    persistentVolumeClaim:      
      claimName: nfs
"""
  
Kubernetes 中，实际上存在着一个专门处理持久化存储的控制器，叫作 VolumeController，这个 Volume Controller 维护着多个控制循环，其中有一个循环叫作 PersistentVolumeController：
它会不断地查看当前每一个 PVC，是不是已经处于Bound（已绑定）状态，如果不是，那它就会遍历所有的、可用的 PV，并尝试将其与这个“单身”的 PVC 进行绑定；
而所谓将一个 PV 与 PVC 进行“绑定”，其实就是将这个 PV 对象的名字，填在了 PVC 对象的 spec.volumeName 字段上

这个 PV 对象，又是如何变成容器里的一个持久化存储的呢？
  首先，所谓容器的 Volume，其实就是将一个宿主机上的目录，跟一个容器里的目录绑定挂载在了一起
  而所谓的“持久化 Volume”，指的就是这个宿主机上的目录，具备“持久性”，即：这个目录里面的内容，既不会因为容器的删除而被清理掉，也不会跟当前的宿主机绑定，当容器被重启或者在其他节点上重建出来之后，它仍然能够通过挂载这个 Volume
  
这个准备“持久化”宿主机目录的过程，我们可以形象地称为“两阶段处理”
  第一个阶段称为 Attach，kubelet会调用相应的插件api来创建远程块存储（具体取决于 Volume 类型），挂载到 Pod 所在的宿主机上，可以把这个过程理解为给云服务器挂载了一块远程磁盘
  第二个阶段称为 Mount，将磁盘设备格式化并挂载到 Volume 宿主机目录的操作
  注意：并非所有的Volume 类型都会经历两阶段，比如NFS就会跳过第一个阶段 直接从“第二阶段”（Mount）开始准备宿主机上的 Volume 目录

在 Kubernetes 中，上述关于 PV 的“两阶段处理”流程，是靠独立于 kubelet 主控制循环（Kubelet Sync Loop）之外的两个控制循环来实现的：
  1、第一阶段”的 Attach（以及 Dettach）操作，是由 Volume Controller 负责维护的，这个控制循环的名字叫作：AttachDetachController，它的作用就是不断地检查每一个 Pod 对应的 PV，和这个 Pod 所在宿主机之间挂载情况，从而决定是否需要对这个 PV 进行 Attach（或者 Dettach）操作；
  作为一个 Kubernetes 内置的控制器，Volume Controller 自然是 kube-controller-manager 的一部分，所以AttachDetachController 也一定是运行在 Master节点上的
  2、第二阶段”的 Mount（以及 Unmount）操作，必须发生在 Pod 对应的宿主机上，所以它必须是 kubelet 组件的一部分，这个控制循环的名字，叫作：VolumeManagerReconciler
  这样同 kubelet 的主循环解耦的好处：避免了这些耗时的远程挂载操作拖慢 kubelet 的主控制循环，进而导致 Pod 的创建效率大幅下降的问题
  kubelet 的一个主要设计原则，就是它的主控制循环绝对不可以被 block

DynamicProvisioning：Kubernetes 为我们提供的一套可以自动创建 PV 的机制
Static Provisioning：前面人工管理 PV 的方式
StorageClass：创建PV的模板，它会定义两部分内容
  1、PV 的属性，比如存储类型、Volume 的大小等等
  2、创建这种 PV 需要用到的存储插件，比如Ceph 等等
  有了这样两个信息之后，Kubernetes 就能够根据用户提交的 PVC，找到一个对应的StorageClass 了。然后，Kubernetes 就会调用该 StorageClass 声明的存储插件，创建出需要的 PV

我们可以先创建出StorageClass对象，然后在 PVC 里指定要使用的 StorageClass 名字，Kubernetes就会调用相应的存储api创建与之对应的PV对象并自动绑定



