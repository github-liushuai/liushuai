可拓展架构的核心思想是模块化，并在此基础上降低模块之间的耦合性，提高模块的复用性
模块分布式部署后具体聚合方式主要有分布式消息队列 和 分布式服务

1）利用分布式消息队列降低系统耦合性
事件驱动架构：典型的架构就是生产者消费模式
分布式消息队列

2）利用分布式服务打造可复用的业务平台
分布式消息队列通过消息对象来分解系统耦合性，而分布式服务通过接口分解系统耦合性
巨无霸应用系统会带来以下困难：
  编译、部署困难
  代码分支管理困难
  数据库连接耗尽
  新增业务困难
解决方法就是拆分，通过纵向拆分来将相关较少的业务剥离，使其成为独立的web应用；横行拆分需要设计服务接口、规范服务依赖关系，还需要一个完善的分布式服务管理框架

web service曾经是企业用于整合异构系统及构建分布式系统最常用的架构，服务提供者通过WSDL（服务描述语言）来向注册中心注册服务，注册中心使用UDDI发布服务，服务请求者通过注册中心检索到服务信息后通过SOAP和提供者通信
存在以下缺点，导致难以满足大型网站对系统高性能、高可用、易部署、易维护的要求：
  臃肿的注册与发现机制
  低效的XML序列化手段
  开销相对较高的HTTP远程通信
  复杂的部署与维护手段

大型网站分布式服务的需求与特点：
  负载均衡
  失效转移
  高效的远程通信
  整合异构系统
  对应用最少侵入
  版本管理
  实时监控

分布式服务框架设计：国内有较多成功实施案例的开源分布式服务框架是阿里的DUBBO

3）可拓展的数据结构
关系型数据库一般使用预先设计冗余字段来实现数据结构的变更，但这也是一种糟糕的设计；而NoSQL数据库使用的列族就是一种解决方案，创建表时只需要指定列族名即可，而列族内的字段可以在写入时再指定，数据结构可以随意拓展

4）利用开放平台建设网站生态圈
开放平台的爱狗设计大同小异：
  API接口：暴露给开发者调用的一组API
  协议转换：将各种API转换成内部服务可识别的形式
  安全：身份识别、权限控制、分级网络带宽（以免内部服务被外部应用拖垮）等
  审计：监控、计费
  路由：映射到具体服务内部
  流程：将一组离散的服务组织成一个上下文相关的新服务，提供统一接口供开发者调用



