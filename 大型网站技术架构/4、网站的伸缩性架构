一般来说网站的伸缩性可分成两类，一类是根据功能进行物理分离实现伸缩，一类是单一功能通过集群实现伸缩
网站发展早期，新增服务器提高网站处理能力时，总是从现有服务中分离出部分功能和服务：
  单一服务器处理所有服务 --> 数据库从应用服务器分离 --> 缓存从应用服务器分离 --> 静态资源从应用服务器分离
事实上通过物理上分离不同的网站功能，实现网站伸缩性的手段，不仅可以用在网站发展早起，而且可以在网站发展的任何时期，具体又可分为以下两种
  纵向分离：分层后分离
  横行分离：业务分割后分离
功能分离可以在一定程度上实现伸缩性，但随着网站访问量增大，哪怕最小粒度的服务，单一服务器可能也无法满足，这时候就必须使用服务器集群来提供服务
  集群伸缩性：
    应用服务器集群伸缩
    数据服务器集群伸缩：
      缓存数据服务器集群伸缩
      存储数据服务器集群伸缩

1）应用服务器集群伸缩
负载均衡可以实现应用服务器集群的伸缩，负载均衡技术可分为以下几种：
  HTTP重定向负载均衡：需要请求两次服务器才能访问一次，性能较差，而且容器被搜索引擎判为SEO作弊，所以比较少用
  DNS域名解析负载均衡：缺点是当注册的服务器故障时，需要删除对应的A记录，但DNS是多级的，任何一级都有可能缓存该A记录造成用户访问到故障服务器；而且DNS负载均衡的控制权在域名服务商那里，网站无法做更多的改善和管理
  反向代理负载均衡：反向代理服务器转发请求在HTTP协议层，所以也叫应用层负载均衡，优点是和反向代理服务器功能集成在一起部署简单，缺点是由于承载所有请求和响应，因此可能会成为瓶颈
  IP负载均衡：在网络层通过修改目标地址来达到负载均衡的目的，这一操作是操作系统内核进程执行的
            这里的关键是真实web服务器响应数据包如何返回给负载均衡服务器：
              1、修改目的地址等同时也修改源地址（SNAT），数据包返回后再次修改目的地址，即可返回给用户
              2、设置真实web服务器等网关地址为负载均衡服务器地址，这样所有响应数据都会到达负载均衡服务器
            IP负载均衡在内核进程完成数据分发，较应用层负载均衡有更好的性能
  数据链路层负载均衡：在数据链路层修改mac地址来实现负载均衡，wb服务器的虚拟ip和负载均衡服务器ip相同，所以wb服务器处理完后将响应数据发送给网关服务器后即可直接发送给用户

常见负载均衡算法如下：
  轮询
  加权轮询
  随机
  最小连接
  源地址散列

2）分布式缓存集群的伸缩性设计
和应用服务器集群不同，缓存集群中不同的缓存服务器中缓存的数据各不相同，这个特点会验证制约集群的伸缩性，必须让新上线的集群对整个集群影响尽量小
memcached分布式缓存集群访问模型：
  ------------------------------------------------------------------
  |  memcachedAPI --> 路由算法 --> memcached服务器集群列表 --> 通信模块 | --> 具体的memcached服务器
  ------------------------------------------------------------------
根据缓存数据的KEY计算得到具体的服务器（路由算法），从而完成读写

分布式缓存集群的伸缩性挑战：
最简单的路由算法是余数hash，先计算KEY的hash值，除以服务器数量得到余数，这能保证缓存数据比较均匀，但是当需要扩容时，缓存命中率急剧下降，当往100台服务器集群中添加一台机器时，不能命中的概览大概是99%
一种解决方法是在访问量最小的时候扩容，然后通过模拟请求来预热缓存，这需要技术团队通宵加班；另一种方法是使用 一致性hash算法

分布式缓存集群的一致性hash算法：
先构造一个0~2^32 的整数环，根据缓存服务器节点的名称的hash值将服务器放置在这个hash环上，然后根据缓存数据KEY的hash值查找距离该值最近的节点，该节点即为该缓存数据的读写节点；
扩容时，只需要把新节点计算hash值后放入hash环中即可，由于key是顺时针查找最近的节点，所以新加入的节点只影响整个环的一小段，当往100台服务器集群中添加一台机器时，不能命中的概览大概是1%，很大程度上保证来缓存命中率
但是！！！这种方法只能影响顺时针最近的那个节点，也就是说它只分担来距离它最近的那个节点的访问量，对于其他节点并没有起到负载均衡的作用！！！
解决方法是增加虚拟层，将新增加的服务器虚拟成一组服务器，如果虚拟的数目足够多，那么这组虚拟节点会影响同样多数目已经存在于hash环上的节点

3）数据存储集群的伸缩性设计
和缓存集群不一样，数据存储集群必须保证数据可靠存储，任何情况下都需要保证可用性和可靠性
关系型数据库的伸缩性设计：






