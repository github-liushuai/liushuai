实现高可用架构的主要手段是 数据和服务的冗余备份和失效转移
典型的网站设计通常分为三层：应用层、服务层、数据层
位于应用层的服务器通常为了应对高并发的访问请求，会通过负载均衡设备将服务器组成一个集群共同对外提供服务，同时负载均衡设备会通过心跳检测等手段来检测后端应用服务器是否可用，检测到某台应用服务器不可用时就将其剔出集群列表，并将请求分发到其他服务器
位于服务层到服务器情况跟应用层类似，也是通过集群方式实现高可用，只是这些服务器被应用层通过分布式服务调用框架访问
位于数据层到服务器需要在数据写入时进行数据同步复制，写入多台服务器，实现冗余备份

1）高可用的应用
通过负载均衡进行无状态服务的失效转移
应用服务器集群的session管理
  session复制：在集群的服务器之间同步session对象，但这种方式不适用于大型网站
  session绑定：同一ip请求总会分发到同一台服务器上，不符合高可用需求，所以很少采用
  使用cookie记录session
  session服务器：利用独立部署的session服务器（集群）统一管理session，应用服务器每次读写session时，都访问session服务器
    
2）高可用的服务
可以使用类似负载均衡的失效转移策略实现高可用的服务，除此之外还有以下几点高可用的服务策略
  分级管理：核心服务部署在更好的硬件设备上，同时服务部署上也要进行必要的隔离，避免故障的连锁反应
  超时设置：服务器宕机、线程死锁等原因可能造成服务端失去响应，应用程序因为得不到响应而一直等待，占用资源切不利于转移访问，所以要设置超时时间
  异步调用：但是要注意不是所有服务都适合使用异步调用
  服务降级：降级有两种手段 拒绝服务及关闭服务，拒绝低优先级的调用或随机拒绝访问，或关闭部分不重要的服务
  幂等性设计
  
3）高可用的数据
数据备份分为冷备 和 热备
  冷备的优点是简单和廉价，但是不能保证数据最终一致
  热备分为异步热备 和 同步热备
失效转移
  1、失效确认：系统确认服务器是否宕机有两种方法，即心跳检测 和 应用程序访问失败报告
    对于应用程序访问失败报告，控制中心还要再一次发送心跳检测再次确认，以免错误判断
  2、访问转移：对于完全对等存储的服务器，只需要应用程序直接切换到对等服务器上；如果存储不对等，那么需要重新计算路由，选择存储服务器
  3、数据恢复
  
高可用网站的软件质量保证
除了网络、服务器等硬件故障导致的系统可用性风险外，还有来自软件系统本身的风险，关于传统的软件测试和软件质量保证管理无需赘言，这里讨论一些与传统软件开发不同的质量保证手段
  1、网站发布：灰度发布，每次只发布集群中的一小部分服务器
  2、自动化测试
  3、预发布验证：预发布服务器是一种特殊用途的服务器，它和线上的正式服务器唯一的区别是它没有配置在负载均衡服务器上，外部用户无法访问，它部署在相同的物理环境中，使用相同的线上配置，依赖相同的外部服务，网站工程师通过绑定hosts来访问，如果在预发布服务器上的测试验证是正确的，基本上可以确保线上正式服务器部署也没问题
    不过也可能因为预发布验证而引入问题，因为预发布验证操作的都是真实数据
  4、代码控制：一般使用git，且主要使用分支开发、主干发布的方式
  5、自动化发布
  6、灰度发布

网站运行监控
监控数据采集：
  1、用户行为日志收集
    服务器端日志收集：软件的日志功能，但可能会出现信息失真，如ip不是用户真实ip
    客户端浏览器日志收集：页面嵌入特定但js脚本
  2、服务器性能监控
  3、运行数据报告：一些与具体业务场景相关的技术和业务指标，比如缓存命中率、平均响应延迟时间、待处理任务总数等
  
监控管理
一般有如下方式
  系统报警
  失效转移
  自动优雅降级




